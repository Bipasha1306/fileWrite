import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.verify;

import java.text.ParseException;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.Map;

import com.fasterxml.jackson.core.JsonProcessingException;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;

@ExtendWith(MockitoExtension.class)
public class DataChangeAlertServiceTest {

    @Mock
    private DataChangeAlertRepository dataChangeAlertRepository;

    @InjectMocks
    private DataChangeAlertService dataChangeAlertService;

    private List<DataChangeAlertDto> mockDtoList;

    @BeforeEach
    void setUp() {
        // Creating mock DTOs with various scenarios, including null fields
        DataChangeAlertDto dto1 = new DataChangeAlertDto();
        dto1.setEntityName("AltCode");
        dto1.setKeys(Map.of("alt_code_type_cd", "spn"));
        dto1.setEventId("1");
        dto1.setTimestamp("2023-08-13T12:34:56");

        DataChangeAlertDto dto2 = new DataChangeAlertDto();
        dto2.setEntityName("AltCode");
        dto2.setKeys(null);  // Null keys to simulate the issue
        dto2.setEventId("2");
        dto2.setTimestamp("2023-08-13T12:34:56");

        DataChangeAlertDto dto3 = new DataChangeAlertDto();
        dto3.setEntityName("AltCode");
        dto3.setKeys(Collections.emptyMap());  // Empty keys
        dto3.setEventId(null);  // Null event ID to simulate the issue
        dto3.setTimestamp(null);  // Null timestamp to simulate the issue

        DataChangeAlertDto dto4 = new DataChangeAlertDto();
        dto4.setEntityName("OtherCode");
        dto4.setKeys(Map.of("alt_code_type_cd", "other"));
        dto4.setEventId("3");
        dto4.setTimestamp("2023-08-13T12:34:56");

        mockDtoList = Arrays.asList(dto1, dto2, dto3, dto4);
    }

    @Test
    void testPopulateDataChangeAlertsWithNulls() throws ParseException, JsonProcessingException {
        // Call the service method with mock data containing nulls
        dataChangeAlertService.populateDataChangeAlerts(mockDtoList);

        // Verify that saveAll was called with the correct number of elements
        verify(dataChangeAlertRepository).saveAll(any(List.class));
    }
}
