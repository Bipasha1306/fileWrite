import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Assertions.*;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;

import java.util.Arrays;
import java.util.List;

@ExtendWith(MockitoExtension.class)
public class DataChangeAlertServiceTest {

    @Mock
    private DataChangeAlertRepository dataChangeAlertRepository;

    @InjectMocks
    private DataChangeAlertService dataChangeAlertService;

    private List<DataChangeAlertDto> mockDtoList;

    @BeforeEach
    void setUp() {
        // Setup some mock DataChangeAlertDto objects
        DataChangeAlertDto dto1 = new DataChangeAlertDto();
        dto1.setEntityName("AltCode");
        dto1.setKeys(Map.of("alt_code_type_cd", "spn"));

        DataChangeAlertDto dto2 = new DataChangeAlertDto();
        dto2.setEntityName("OtherCode");
        dto2.setKeys(Map.of("alt_code_type_cd", "other"));

        mockDtoList = Arrays.asList(dto1, dto2);
    }

    @Test
    public void testPopulateDataChangeAlerts() {
        // Invoke the method
        dataChangeAlertService.populateDataChangeAlerts(mockDtoList);

        // Verify the repository's saveAll method was called
        verify(dataChangeAlertRepository, times(1)).saveAll(anyList());
    }
}
//////////////////
@BeforeEach
void setUp() {
    DataChangeAlertDto dto1 = new DataChangeAlertDto();
    dto1.setEntityName(null);  // Intentionally setting to null for testing
    dto1.setKeys(Map.of("alt_code_type_cd", null));  // Intentionally setting to null

    DataChangeAlertDto dto2 = new DataChangeAlertDto();
    dto2.setEntityName("OtherCode");
    dto2.setKeys(Map.of("alt_code_type_cd", "other"));

    mockDtoList = Arrays.asList(dto1, dto2);
}

@Test
public void testPopulateDataChangeAlertsWithNulls() {
    // Invoke the method
    dataChangeAlertService.populateDataChangeAlerts(mockDtoList);

    // Verify the repository's saveAll method was called
    verify(dataChangeAlertRepository, times(1)).saveAll(anyList());
}
//////////
@Test
public void testPopulateDataChangeAlertsWithNullValues() {
    // Setup a mock DataChangeAlertDto with null fields
    DataChangeAlertDto dtoWithNulls = new DataChangeAlertDto();
    dtoWithNulls.setEntityName(null);
    dtoWithNulls.setKeys(null);

    List<DataChangeAlertDto> dtoListWithNulls = Arrays.asList(dtoWithNulls);

    // Invoke the method
    assertDoesNotThrow(() -> dataChangeAlertService.populateDataChangeAlerts(dtoListWithNulls));

    // Verify the repository's saveAll method was called
    verify(dataChangeAlertRepository, times(1)).saveAll(anyList());
}

