import java.util.UUID;

public LoadDto insertLoad(String queryName) {
    LoadEntity loadEntity = LoadEntity.builder()
            .runId(CommonUtil.createUUID())
            .loadCd(queryName)
            .loadId(UUID.randomUUID().getLeastSignificantBits() & Long.MAX_VALUE) // Generate unique ID
            .type(DataLoadTypes.PANDA_ALERTS)
            .transformingStatus(DataLoadTransformingStatuses.WAITING)
            .fromDt(new Date())
            .toDt(new Date())
            .build();
    return loadService.insertLoad(loadEntity);
}

change 2-------------

List<DataChangeAlertEntity> notificationDetailsList = dataChangeAlertRepository.findAllByIsProcessedAndSourceSystemAndEntityName(
    "N", "panda", entityName);

// Initialize or retrieve the existing list from the result map
List<String> filters = (List<String>) result.computeIfAbsent(filterColumn, k -> new ArrayList<>());

// Process notification details and add to the filters list
for (DataChangeAlertEntity notificationDetails : notificationDetailsList) {
    try {
        // Since the query already filters out processed records, no need for further checking
        processNotificationDetails(notificationDetails, filterColumn, filters);
        log.info("Processing NotificationDetails with isProcessed = N");
        
    } catch (JsonProcessingException e) {
        log.error("Error processing NotificationDetails", e);
    }
}

