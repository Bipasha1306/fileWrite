@Override
public Map<String, String> getEntitiesAndFilterColumnsByQuery(Optional<PandaDataRadixConfigProperties.RadixQueryProperties> radixQueryProperties) {
    return radixQueryProperties
             .map(radixQueryProps -> 
                  radixQueryProps.getEntities().stream()
                                 .flatMap(entity -> entity.getName().stream()
                                     .map(name -> new AbstractMap.SimpleEntry<>(name, entity.getFilterColumns().get(0)))) // Create a new entry
                                 .collect(Collectors.toMap(
                                     entry -> entry.getKey(),  // Use lambda instead of method reference
                                     entry -> entry.getValue() // Use lambda instead of method reference
                                 )))
             .orElse(new LinkedHashMap<>());
}
/////////////////- 2:49
public Map<String, Object> getFilters(Map<String, String> entityAndFilterColumn) {
    Map<String, Object> result = new LinkedHashMap<>();
    
    entityAndFilterColumn.forEach((entityName, filterColumn) -> {
        log.info("Processing entity: " + entityName + " with filter column: " + filterColumn);

        List<NotificationDetails> notificationDetailsList = notificationRepository.findAllByIsProcessedAndSourceSystemAndEntityName(
            "N", "panda", entityName);
        
        // Initialize or retrieve the existing list from the result map
        List<String> filters = (List<String>) result.computeIfAbsent(filterColumn, k -> new ArrayList<>());
        
        // Process notification details and add to the filters list
        for (NotificationDetails notificationDetails : notificationDetailsList) {
            try {
                if ("N".equals(notificationDetails.getIsProcessed())) {
                    processNotificationDetails(notificationDetails, filterColumn, filters);
                } else if ("Y".equals(notificationDetails.getIsProcessed())) {
                    log.info("Skipping processing for NotificationDetails with isProcessed = Y");
                }
            } catch (JsonProcessingException e) {
                log.error("Error processing NotificationDetails", e);
            }
        }
    });

    return result;
}

//////// 3:20

public String toCamelCase(String filter) {
    return filter.replaceAll("_(.)", m -> m.group(1).toUpperCase());
}
////
import java.util.regex.Matcher;
import java.util.regex.Pattern;

public String toCamelCase(String filter) {
    Pattern pattern = Pattern.compile("_(.)");
    Matcher matcher = pattern.matcher(filter);
    
    return matcher.replaceAll(m -> m.group(1).toUpperCase());
}

////// 3.50

import java.util.regex.Pattern;
import java.util.regex.Matcher;

public String toCamelCase(String filter) {
    return Pattern.compile("_(.)")
                  .matcher(filter)
                  .replaceAll(m -> m.group(1).toUpperCase());
}
//////4:15
private String sanitizeValue(String value) {
    if (value == null) {
        return "\"\"";
    }
    // Remove all newline characters (both \r and \n) and escape double quotes
    String sanitized = value.replaceAll("[\r\n]+", " "); // Remove newlines, replace with a single space
    return "\"" + sanitized.replace("\"", "\"\"") + "\"";
}
----------
for (String key : keys) {
    String[] nestedKeys = key.split("\\.");
    String[] newKeys = Arrays.copyOfRange(nestedKeys, containEdges ? 2 : 1, nestedKeys.length);
    Object value = getValue(account, newKeys, j);
    
    // Sanitize the value before adding it to the list
    values.add(sanitizeValue(value != null ? value.toString() : null));

    // Check if the current key is accountId
    if (accountId == null && nestedKeys != null && nestedKeys.length > 0 && nestedKeys[nestedKeys.length - 1].equals(currentFilter)) {
        accountId = (value != null) ? value.toString() : null;
        accountsFound.put(accountId, true);
    }

    // If it's the last iteration of the loop, add "insert" or "delete"
    if (keysIndex == keys.size() - 1) {
        String eventType = (accountId != null) ? (String) eventTypeMap.getOrDefault(accountId, "") : "";
        values.add(sanitizeValue(eventType));
    }
    keysIndex++;
}

