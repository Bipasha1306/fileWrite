import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;

@ExtendWith(MockitoExtension.class)
public class PandaListenerServiceTest {

    @Mock
    private NotificationRepository notificationRepository;

    @Mock
    private ObjectMapper objectMapper;

    @InjectMocks
    private PandaListenerService pandaListenerService;

    @BeforeEach
    void setUp() {
        // This method can be used to set up common test data or configurations
    }

    @Test
    void testStoreConsumeEventsInDb() throws Exception {
        String messageData = "{\"timestamp\": \"2024-07-29T10:00:00.0000000Z\", \"keys\": {\"key1\": \"value1\"}, \"eventId\": \"event123\", \"entityName\": \"entity\", \"eventType\": \"type\", \"towerCode\": \"tower\"}";
        PandaListenerResponse listenerResponse = new PandaListenerResponse();
        listenerResponse.setTimestamp("2024-07-29T10:00:00.0000000Z");
        
        Map<String, String> keys = new HashMap<>();
        keys.put("key1", "value1");
        listenerResponse.setKeys(keys);
        
        listenerResponse.setEventId("event123");
        listenerResponse.setEntityName("entity");
        listenerResponse.setEventType("type");
        listenerResponse.setTowerCode("tower");

        when(objectMapper.readValue(messageData, PandaListenerResponse.class)).thenReturn(listenerResponse);

        pandaListenerService.storeConsumeEventsInDb(messageData);

        verify(notificationRepository, times(1)).save(any(NotificationDetails.class));
    }

    @Test
    void testStoreConsumeEventsInDbJsonProcessingException() throws Exception {
        String messageData = "{\"invalid\": \"data\"}";

        when(objectMapper.readValue(messageData, PandaListenerResponse.class)).thenThrow(JsonProcessingException.class);

        assertThrows(JsonProcessingException.class, () -> {
            pandaListenerService.storeConsumeEventsInDb(messageData);
        });

        verify(notificationRepository, never()).save(any(NotificationDetails.class));
    }

    @Test
    void testStoreConsumeEventsInDbParseException() throws Exception {
        String messageData = "{\"timestamp\": \"invalid-date\", \"keys\": {\"key1\": \"value1\"}, \"eventId\": \"event123\", \"entityName\": \"entity\", \"eventType\": \"type\", \"towerCode\": \"tower\"}";
        PandaListenerResponse listenerResponse = new PandaListenerResponse();
        listenerResponse.setTimestamp("invalid-date");

        Map<String, String> keys = new HashMap<>();
        keys.put("key1", "value1");
        listenerResponse.setKeys(keys);

        when(objectMapper.readValue(messageData, PandaListenerResponse.class)).thenReturn(listenerResponse);

        assertThrows(ParseException.class, () -> {
            pandaListenerService.storeConsumeEventsInDb(messageData);
        });

        verify(notificationRepository, never()).save(any(NotificationDetails.class));
    }
}


import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

import com.fasterxml.jackson.core.JsonProcessingException;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Spy;
import org.mockito.junit.jupiter.MockitoExtension;

import java.text.ParseException;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.Map;

@ExtendWith(MockitoExtension.class)
public class DataChangeAlertServiceTest {

    @Spy
    private DataChangeAlertRepository dataChangeAlertRepository;

    @InjectMocks
    private DataChangeAlertService dataChangeAlertService;

    private List<DataChangeAlertDto> mockDtoList;

    @BeforeEach
    void setUp() {
        // Use a simple date format for testing to avoid parsing issues
        String validDate = "2024-07-29T10:00:00"; // Simplified format without milliseconds or timezone

        DataChangeAlertDto dto1 = new DataChangeAlertDto();
        dto1.setEntityName("AltCode");
        dto1.setKeys(Map.of("alt_code_type_cd", "spn"));
        dto1.setEventId("1");
        dto1.setTimestamp(validDate);

        DataChangeAlertDto dto2 = new DataChangeAlertDto();
        dto2.setEntityName("AltCode");
        dto2.setKeys(null);  // Null keys to simulate the issue
        dto2.setEventId("2");
        dto2.setTimestamp(validDate);

        DataChangeAlertDto dto3 = new DataChangeAlertDto();
        dto3.setEntityName("AltCode");
        dto3.setKeys(Collections.emptyMap());  // Empty keys
        dto3.setEventId(null);  // Null event ID to simulate the issue
        dto3.setTimestamp(null);  // Null timestamp to simulate the issue

        DataChangeAlertDto dto4 = new DataChangeAlertDto();
        dto4.setEntityName("OtherCode");
        dto4.setKeys(Map.of("alt_code_type_cd", "other"));
        dto4.setEventId("3");
        dto4.setTimestamp(validDate);

        mockDtoList = Arrays.asList(dto1, dto2, dto3, dto4);
    }

    @Test
    void testPopulateDataChangeAlerts() throws ParseException, JsonProcessingException {
        assertDoesNotThrow(() -> dataChangeAlertService.populateDataChangeAlerts(mockDtoList));
        // Verify that saveAll was called once with valid data change alerts
        verify(dataChangeAlertRepository, times(1)).saveAll(anyList());
    }

    @Test
    void testWithInvalidKeysAndNullFields() {
        DataChangeAlertDto dtoWithNullKeys = new DataChangeAlertDto();
        dtoWithNullKeys.setEntityName("AltCode");
        dtoWithNullKeys.setKeys(null);  // Null keys to simulate the issue

        List<DataChangeAlertDto> dtoList = Collections.singletonList(dtoWithNullKeys);

        assertDoesNotThrow(() -> dataChangeAlertService.populateDataChangeAlerts(dtoList));
        // Verify that saveAll was not called
        verify(dataChangeAlertRepository, never()).saveAll(anyList());
    }

    @Test
    void testWithEmptyDtoList() {
        List<DataChangeAlertDto> emptyDtoList = Collections.emptyList();

        assertDoesNotThrow(() -> dataChangeAlertService.populateDataChangeAlerts(emptyDtoList));
        // Verify that saveAll was not called
        verify(dataChangeAlertRepository, never()).saveAll(anyList());
    }

    @Test
    void testExceptionHandlingInBuildMethod() throws ParseException, JsonProcessingException {
        DataChangeAlertDto dtoWithInvalidData = new DataChangeAlertDto();
        dtoWithInvalidData.setEntityName("AltCode");
        dtoWithInvalidData.setKeys(Map.of("alt_code_type_cd", "spn"));
        dtoWithInvalidData.setEventId("invalid_event_id"); // Invalid long value for eventId
        dtoWithInvalidData.setTimestamp("invalid_timestamp"); // Invalid date format

        List<DataChangeAlertDto> dtoList = Collections.singletonList(dtoWithInvalidData);

        RuntimeException exception = assertThrows(RuntimeException.class, () -> {
            dataChangeAlertService.populateDataChangeAlerts(dtoList);
        });

        assertTrue(exception.getCause() instanceof ParseException || exception.getCause() instanceof JsonProcessingException);
    }
}

/////////////////////////////
import java.util.Optional;

public static DataChangeAlertEntity build(DataChangeAlertDto dataChangeAlertDto) throws ParseException, JsonProcessingException {
    var dataChangeAlertEntity = new DataChangeAlertEntity();

    // Handle and validate timestamp
    String timestamp = dataChangeAlertDto.getTimestamp();
    var dateFormat = new SimpleDateFormat(CommonConstants.TIMESTAMP_FORMAT_WITH_ALL);

    dataChangeAlertEntity.setCycleDate(
        Optional.ofNullable(timestamp)
                .filter(t -> !t.isEmpty())
                .map(t -> {
                    try {
                        return dateFormat.parse(t);
                    } catch (ParseException e) {
                        throw new IllegalArgumentException("Invalid date format for timestamp", e);
                    }
                })
                .orElseThrow(() -> new IllegalArgumentException("Timestamp cannot be null or empty"))
    );

    // Handle and validate event ID
    String eventIdStr = dataChangeAlertDto.getEventId();
    dataChangeAlertEntity.setEventId(
        Optional.ofNullable(eventIdStr)
                .filter(eid -> !eid.isEmpty())
                .map(eid -> {
                    try {
                        return Long.parseLong(eid);
                    } catch (NumberFormatException e) {
                        throw new IllegalArgumentException("Invalid format for event ID", e);
                    }
                })
                .orElseThrow(() -> new IllegalArgumentException("Event ID cannot be null or empty"))
    );

    // Handle other fields with null checks
    dataChangeAlertEntity.setNotification(
        Optional.ofNullable(dataChangeAlertDto.getKeys())
                .map(keys -> {
                    try {
                        return new ObjectMapper().writeValueAsString(keys);
                    } catch (JsonProcessingException e) {
                        throw new RuntimeException("Error converting keys to JSON", e);
                    }
                })
                .orElse("No Notification")
    );
    dataChangeAlertEntity.setEntityName(Optional.ofNullable(dataChangeAlertDto.getEntityName()).orElse("Unknown Entity"));
    dataChangeAlertEntity.setEventType(Optional.ofNullable(dataChangeAlertDto.getEventType()).orElse("Unknown Type"));
    dataChangeAlertEntity.setSourceSystem(Optional.ofNullable(dataChangeAlertDto.getTowerCode()).orElse("Unknown Tower"));
    dataChangeAlertEntity.setOffsetValue(Optional.ofNullable(dataChangeAlertDto.getOffset()).orElse("No Offset"));
    dataChangeAlertEntity.setComments("From Panda with offset: " + Optional.ofNullable(dataChangeAlertDto.getOffset()).orElse("None"));

    return dataChangeAlertEntity;
}

////////////////////
import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.Spy;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.test.util.ReflectionTestUtils;

import java.text.ParseException;
import java.util.*;

@ExtendWith(MockitoExtension.class)
public class DataChangeAlertServiceTest {

    @Spy
    private DataChangeAlertRepository dataChangeAlertRepository;  // Spy for the repository

    @InjectMocks
    private DataChangeAlertService dataChangeAlertService;

    private List<DataChangeAlertDto> mockDtoList;

    @BeforeEach
    void setUp() {
        // Use valid timestamp format
        String validTimestamp = "2024-07-29T10:00:00.0000000Z"; // Example format, ensure it matches

        // Create DTOs with various scenarios
        DataChangeAlertDto dto1 = new DataChangeAlertDto();
        dto1.setEntityName("AltCode");
        dto1.setKeys(Map.of("alt_code_type_cd", "spn"));
        dto1.setEventId("1");
        dto1.setTimestamp(validTimestamp);

        DataChangeAlertDto dto2 = new DataChangeAlertDto();
        dto2.setEntityName("AltCode");
        dto2.setKeys(null);  // Null keys to simulate the issue
        dto2.setEventId("2");
        dto2.setTimestamp(validTimestamp);

        DataChangeAlertDto dto3 = new DataChangeAlertDto();
        dto3.setEntityName("AltCode");
        dto3.setKeys(Collections.emptyMap());  // Empty keys
        dto3.setEventId("3");
        dto3.setTimestamp(validTimestamp);

        mockDtoList = Arrays.asList(dto1, dto2, dto3);
    }

    @Test
    void testPopulateDataChangeAlerts() throws ParseException, JsonProcessingException {
        // Mocking the batchSize field
        ReflectionTestUtils.setField(dataChangeAlertService, "batchSize", 10);

        // Call the method
        assertDoesNotThrow(() -> dataChangeAlertService.populateDataChangeAlerts(mockDtoList));

        // Verify that saveAll was called with the correct batch size
        verify(dataChangeAlertRepository, atLeastOnce()).saveAll(anyList());
    }

    @Test
    void testWithInvalidKeys() {
        DataChangeAlertDto dtoWithNullKeys = new DataChangeAlertDto();
        dtoWithNullKeys.setEntityName("AltCode");
        dtoWithNullKeys.setKeys(null);  // Null keys to simulate the issue
        dtoWithNullKeys.setEventId("valid_event_id");
        dtoWithNullKeys.setTimestamp("2024-07-29T10:00:00.0000000Z");

        List<DataChangeAlertDto> dtoList = Collections.singletonList(dtoWithNullKeys);

        // Call the method
        assertDoesNotThrow(() -> dataChangeAlertService.populateDataChangeAlerts(dtoList));

        // Verify that saveAll was not called
        verify(dataChangeAlertRepository, never()).saveAll(anyList());
    }

    @Test
    void testWithEmptyDtoList() {
        List<DataChangeAlertDto> emptyDtoList = Collections.emptyList();

        // Call the method
        assertDoesNotThrow(() -> dataChangeAlertService.populateDataChangeAlerts(emptyDtoList));

        // Verify that saveAll was not called for an empty list
        verify(dataChangeAlertRepository, never()).saveAll(anyList());
    }
}

////////////////
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.springframework.scheduling.annotation.Scheduled;

import static org.mockito.Mockito.doNothing;
import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;

class ScheduledTasksTest {

    @Mock
    private CustomKafkaListenerRegistry customKafkaListenerRegistry;

    @InjectMocks
    private ScheduledTasks scheduledTasks;

    @BeforeEach
    void setUp() {
        MockitoAnnotations.openMocks(this);
    }

    @Test
    @Scheduled(cron = "0 00 05 * * *")
    void testActivateListener() throws BusinessException {
        // Arrange
        doNothing().when(customKafkaListenerRegistry).registerListenerContainer(KafkaTopics.getTopicListenerIdByDataLoadType(DataLoadTypes.DATA_CHANGE_ALERT));

        // Act & Assert
        assertDoesNotThrow(() -> scheduledTasks.activateListener(), "Activate Listener should not throw any exception");
    }

    @Test
    @Scheduled(cron = "0 15 15 * * *")
    void testDeactivateListener() {
        // Arrange
        doNothing().when(customKafkaListenerRegistry).unregisterListenerContainer(KafkaTopics.getTopicListenerIdByDataLoadType(DataLoadTypes.DATA_CHANGE_ALERT));

        // Act & Assert
        assertDoesNotThrow(() -> scheduledTasks.deactivateListener(), "Deactivate Listener should not throw any exception");
    }
}


