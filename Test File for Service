import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;

@ExtendWith(MockitoExtension.class)
public class PandaListenerServiceTest {

    @Mock
    private NotificationRepository notificationRepository;

    @Mock
    private ObjectMapper objectMapper;

    @InjectMocks
    private PandaListenerService pandaListenerService;

    @BeforeEach
    void setUp() {
        // This method can be used to set up common test data or configurations
    }

    @Test
    void testStoreConsumeEventsInDb() throws Exception {
        String messageData = "{\"timestamp\": \"2024-07-29T10:00:00Z\", \"keys\": {\"key1\": \"value1\"}, \"eventId\": \"event123\", \"entityName\": \"entity\", \"eventType\": \"type\", \"towerCode\": \"tower\"}";
        PandaListenerResponse listenerResponse = new PandaListenerResponse();
        listenerResponse.setTimestamp("2024-07-29T10:00:00Z");
        
        Map<String, String> keys = new HashMap<>();
        keys.put("key1", "value1");
        listenerResponse.setKeys(keys);
        
        listenerResponse.setEventId("event123");
        listenerResponse.setEntityName("entity");
        listenerResponse.setEventType("type");
        listenerResponse.setTowerCode("tower");

        when(objectMapper.readValue(messageData, PandaListenerResponse.class)).thenReturn(listenerResponse);

        pandaListenerService.storeConsumeEventsInDb(messageData);

        verify(notificationRepository, times(1)).save(any(NotificationDetails.class));
    }

    @Test
    void testStoreConsumeEventsInDbJsonProcessingException() throws Exception {
        String messageData = "{\"invalid\": \"data\"}";

        when(objectMapper.readValue(messageData, PandaListenerResponse.class)).thenThrow(JsonProcessingException.class);

        assertThrows(JsonProcessingException.class, () -> {
            pandaListenerService.storeConsumeEventsInDb(messageData);
        });

        verify(notificationRepository, never()).save(any(NotificationDetails.class));
    }

    @Test
    void testStoreConsumeEventsInDbParseException() throws Exception {
        String messageData = "{\"timestamp\": \"invalid-date\", \"keys\": {\"key1\": \"value1\"}, \"eventId\": \"event123\", \"entityName\": \"entity\", \"eventType\": \"type\", \"towerCode\": \"tower\"}";
        PandaListenerResponse listenerResponse = new PandaListenerResponse();
        listenerResponse.setTimestamp("invalid-date");

        Map<String, String> keys = new HashMap<>();
        keys.put("key1", "value1");
        listenerResponse.setKeys(keys);

        when(objectMapper.readValue(messageData, PandaListenerResponse.class)).thenReturn(listenerResponse);

        assertThrows(ParseException.class, () -> {
            pandaListenerService.storeConsumeEventsInDb(messageData);
        });

        verify(notificationRepository, never()).save(any(NotificationDetails.class));
    }
}
