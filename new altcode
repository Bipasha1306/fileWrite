The issue arises because the `storeConsumeEventsInDb` method is invoked even when the `alt_code_type_cd` is "other". This means that the actual method logic is being executed, leading to an invocation of `notificationRepository.saveAll()` with an empty list.

To fix this, we need to ensure that the repository's `saveAll` method is only invoked when the `alt_code_type_cd` is "spn". We can add an additional check for the size of the `notificationDetailsList` before calling `saveAll`.

Hereâ€™s the corrected `storeConsumeEventsInDb` method and the test case:

### Corrected `storeConsumeEventsInDb` Method:

```java
public class PandaListenersService {
    private final NotificationRepository notificationRepository;
    private final ObjectMapper objectMapper = new ObjectMapper();

    public PandaListenersService(final NotificationRepository notificationRepository) {
        this.notificationRepository = notificationRepository;
    }

    public void storeConsumeEventsInDb(List<ConsumerRecord<String, String>> consumerRecords) throws JsonProcessingException, ParseException {
        SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSSSSSSSX");
        List<NotificationDetails> notificationDetailsList = new ArrayList<>();

        for (ConsumerRecord<String, String> record : consumerRecords) {
            String message = record.value();
            long offset = record.offset();

            PandaListenerResponse listenerResponse = objectMapper.readValue(message, PandaListenerResponse.class);

            // Check if entityName is "AltCode" and alt_code_type_cd is "spn"
            if ("AltCode".equals(listenerResponse.getEntityName())) {
                String altCodeTypeCd = listenerResponse.getKeys().get("alt_code_type_cd");
                if (!"spn".equals(altCodeTypeCd)) {
                    log.info("Skipping message with entityName 'AltCode' and alt_code_type_cd: " + altCodeTypeCd);
                    continue; // Skip processing this message
                }
            }

            NotificationDetails notificationDetails = new NotificationDetails();
            Date jsonDate = dateFormat.parse(String.valueOf(listenerResponse.getTimestamp()));
            notificationDetails.setNotificationId(listenerResponse.getKeys().toString());
            notificationDetails.setEventId(Long.parseLong(listenerResponse.getEventId()));
            notificationDetails.setEntityName(listenerResponse.getEntityName());
            notificationDetails.setEventType(listenerResponse.getEventType());
            notificationDetails.setSourceSystem(listenerResponse.getTowerCode());
            notificationDetails.setRowId(String.valueOf(offset));
            notificationDetails.setProcessStep("Y");
            notificationDetails.setCycleDate(jsonDate);
            notificationDetails.setAuditCd("SYSTEM");
            notificationDetails.setComments("From Panda");
            notificationDetails.setAuditCreatedTs(new Date());
            notificationDetails.setAuditCreatedBy("SYSTEM");
            notificationDetails.setAuditUpdatedTs(new Date());
            notificationDetails.setComments("From Panda with offset: " + offset);
            notificationDetailsList.add(notificationDetails);
        }

        if (!notificationDetailsList.isEmpty()) {
            try {
                notificationRepository.saveAll(notificationDetailsList);
                log.info("Panda notification messages inserted for " + notificationDetailsList.size() + " records.");
            } catch (Exception e) {
                log.error("Failed to insert notification details", e);
            }
        } else {
            log.info("No valid records to insert.");
        }
    }
}
```

### Corrected Test Case:

```java
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.apache.kafka.clients.consumer.ConsumerRecord;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;

import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.*;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.ArgumentMatchers.anyList;
import static org.mockito.Mockito.*;

class PandaListenersServiceTest {

    @Mock
    private NotificationRepository notificationRepository;

    @Mock
    private ObjectMapper objectMapper;

    @InjectMocks
    private PandaListenersService pandaListenerService;

    @BeforeEach
    void setUp() {
        MockitoAnnotations.openMocks(this);
    }

    @Test
    void testStoreConsumeEventsInDbWithAltCodeSpn() throws Exception {
        String messageData = "{\"timestamp\": \"2024-07-29T10:00:00.0000000Z\", \"keys\": {\"alt_code_type_cd\": \"spn\"}, \"eventId\": \"123\", \"entityName\": \"AltCode\", \"eventType\": \"type\", \"towerCode\": \"tower\"}";
        PandaListenerResponse listenerResponse = new PandaListenerResponse();
        listenerResponse.setTimestamp("2024-07-29T10:00:00.0000000Z");

        Map<String, String> keys = new HashMap<>();
        keys.put("alt_code_type_cd", "spn");
        listenerResponse.setKeys(keys);

        listenerResponse.setEventId("123");
        listenerResponse.setEntityName("AltCode");
        listenerResponse.setEventType("type");
        listenerResponse.setTowerCode("tower");

        ConsumerRecord<String, String> consumerRecord = new ConsumerRecord<>("panda_data_change_alert", 0, 5347483, null, messageData);
        List<ConsumerRecord<String, String>> consumerRecords = new ArrayList<>();
        consumerRecords.add(consumerRecord);

        when(objectMapper.readValue(messageData, PandaListenerResponse.class)).thenReturn(listenerResponse);

        pandaListenerService.storeConsumeEventsInDb(consumerRecords);

        ArgumentCaptor<List<NotificationDetails>> captor = ArgumentCaptor.forClass(List.class);
        verify(notificationRepository, times(1)).saveAll(captor.capture());

        List<NotificationDetails> capturedNotificationDetails = captor.getValue();
        assertEquals(1, capturedNotificationDetails.size());
        assertEquals(5347483, Long.parseLong(capturedNotificationDetails.get(0).getRowId()));
    }

    @Test
    void testStoreConsumeEventsInDbWithAltCodeNonSpn() throws Exception {
        String messageData = "{\"timestamp\": \"2024-07-29T10:00:00.0000000Z\", \"keys\": {\"alt_code_type_cd\": \"other\"}, \"eventId\": \"123\", \"entityName\": \"AltCode\", \"eventType\": \"type\", \"towerCode\": \"tower\"}";
        PandaListenerResponse listenerResponse = new PandaListenerResponse();
        listenerResponse.setTimestamp("2024-07-29T10:00:00.0000000Z");

        Map<String, String> keys = new HashMap<>();
        keys.put("alt_code_type_cd", "other");
        listenerResponse.setKeys(keys);

        listenerResponse.setEventId("123");
        listenerResponse.setEntityName("AltCode");
        listenerResponse.setEventType("type");
        listenerResponse.setTowerCode("tower");

        ConsumerRecord<String, String> consumerRecord = new ConsumerRecord<>("panda_data_change_alert", 0, 5347483, null, messageData);
        List<ConsumerRecord<String, String>> consumerRecords = new ArrayList<>();
        consumerRecords.add(consumerRecord);

        when(objectMapper.readValue(messageData, PandaListenerResponse.class)).thenReturn(listenerResponse);

        pandaListenerService.storeConsumeEventsInDb(consumerRecords);

        verify(notificationRepository, never()).saveAll(anyList());
    }
}
```

### Key Changes:

1. **Added a Check**: Before calling `saveAll`, we now check if `notificationDetailsList` is not empty.
2. **Handled Empty List**: Added a log statement to indicate no valid records to insert.

These changes ensure that the repository's `saveAll` method is only called when there are valid records to save, thus preventing the `NeverWantedButInvoked` error in the test case.
