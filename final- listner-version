@Slf4j
@Service
@FieldDefaults(level = AccessLevel.PRIVATE, makeFinal = true)
public class PandaNotificationListener implements MessageListener<String, String> {

    CustomKafkaListenerRegistry customKafkaListenerRegistry;
    PandaListenerService pandaListenerService;
    List<ConsumerRecord<String, String>> consumerRecordBuffer;
    List<Acknowledgment> acknowledgmentBuffer;

    @Value("${kafka.listeners[3].listener-id}")
    String listenerId;

    /**
     * Constructor for PandaNotificationListener.
     *
     * @param customKafkaListenerRegistry Custom Kafka Listener Registry.
     * @param pandaListenerService        Service to handle panda listener operations.
     * @param listenerId                  The listener ID.
     */
    public PandaNotificationListener(CustomKafkaListenerRegistry customKafkaListenerRegistry,
                                     final PandaListenerService pandaListenerService, final String listenerId) {
        this.customKafkaListenerRegistry = customKafkaListenerRegistry;
        this.pandaListenerService = pandaListenerService;
        this.listenerId = listenerId;
        this.consumerRecordBuffer = new ArrayList<>();
        this.acknowledgmentBuffer = new ArrayList<>();
    }

    /**
     * Called when a message is received. Adds the message to the buffer.
     *
     * @param consumerRecord The record received from Kafka.
     * @param acknowledgment The acknowledgment object for manual acknowledgment.
     */
    @Override
    public void onMessage(final ConsumerRecord<String, String> consumerRecord, Acknowledgment acknowledgment) {
        try {
            log.info("Received message: " + consumerRecord.value());
            synchronized (consumerRecordBuffer) {
                consumerRecordBuffer.add(consumerRecord);
                acknowledgmentBuffer.add(acknowledgment);
            }
        } catch (Exception exception) {
            log.error("Listening panda data did throw an error!", exception);
        }
    }

    /**
     * Registers the Kafka listener. Scheduled to run daily at 5 AM.
     *
     * @throws BusinessException if an error occurs during registration.
     */
    @Scheduled(cron = "0 00 05 * * ?") //Runs daily at 5 AM
    public void consumeFromKafka() throws BusinessException {
        log.info("The Kafka listener started");
        registerKafkaListener();
    }

    /**
     * Unregisters the Kafka listener and flushes messages to the database. Scheduled to run daily at 5:15 AM.
     */
    @Scheduled(cron = "0 15 05 * * ?") //Runs daily at 5:15 AM
    public void stopListener() {
        flushMessages();
        customKafkaListenerRegistry.unregisterListenerContainer(listenerId);
    }

    /**
     * Registers the Kafka listener container.
     *
     * @throws BusinessException if an error occurs during registration.
     */
    public void registerKafkaListener() throws BusinessException {
        customKafkaListenerRegistry.registerListenerContainer(listenerId);
    }

    /**
     * Flushes the buffered messages to the database and acknowledges the messages.
     */
    private void flushMessages() {
        List<ConsumerRecord<String, String>> recordsToFlush;
        List<Acknowledgment> acksToFlush;

        synchronized (consumerRecordBuffer) {
            recordsToFlush = new ArrayList<>(consumerRecordBuffer);
            acksToFlush = new ArrayList<>(acknowledgmentBuffer);
            consumerRecordBuffer.clear();
            acknowledgmentBuffer.clear();
        }

        try {
            log.info("Flushing messages to the database");
            List<String> messages = recordsToFlush.stream()
                                                   .map(ConsumerRecord::value)
                                                   .collect(Collectors.toList());
            pandaListenerService.storeConsumeEventsInDb(messages);
            log.info("Flushed messages to the database successfully");

            // Acknowledge the messages after successful processing
            for (Acknowledgment acknowledgment : acksToFlush) {
                acknowledgment.acknowledge();
            }
            log.info("All messages acknowledged successfully");
        } catch (Exception e) {
            log.error("Error while flushing messages to the database", e);
        }
    }
}
