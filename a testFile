import org.apache.kafka.clients.consumer.ConsumerRecord;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.*;
import org.springframework.test.context.junit.jupiter.SpringExtension;
import org.springframework.kafka.support.Acknowledgment;

import java.lang.reflect.Field;
import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.ConcurrentMap;

import static org.mockito.Mockito.*;

@ExtendWith(SpringExtension.class)
public class PandaNotificationListenerTest {

    @InjectMocks
    private PandaNotificationListener pandaNotificationListener;

    @Mock
    private CustomKafkaListenerRegistry customKafkaListenerRegistry;

    @Mock
    private PandaListenerService pandaListenerService;

    @Mock
    private Acknowledgment acknowledgment;

    private ConsumerRecord<String, String> consumerRecord;

    @BeforeEach
    public void setUp() {
        consumerRecord = new ConsumerRecord<>(
                "panda_data_change_alert", 0, 5347483L, "36757381", 
                "{\"towerCode\":\"panda\",\"attributes\":[\"accountId\"],\"keys\":{\"contact_type_cd\":\"ADRR\",\"end_dt\":null,\"account_id\":\"3131338\",\"employing_party_id\":\"1137\",\"person_id\":\"209115\"},\"entityName\":\"AccountContact\",\"data\":null,\"eventId\":\"36757381\",\"traceId\":\"36757381:2024-07-29 21:20:06\",\"eventType\":\"UPDATE\",\"timestamp\":\"2024-07-29T21:20:06.432164Z\"}"
        );
    }

    @Test
    public void testConsumeFromKafka() throws BusinessException {
        doNothing().when(customKafkaListenerRegistry).registerListenerContainer(anyString());

        pandaNotificationListener.consumeFromKafka();

        verify(customKafkaListenerRegistry, times(1)).registerListenerContainer("panda-topic-listener-id");
    }

    @Test
    public void testOnMessage() {
        pandaNotificationListener.onMessage(consumerRecord);

        // Verify if the record is added to the recordList
        // Use reflection to access the private recordList field
        try {
            Field recordListField = PandaNotificationListener.class.getDeclaredField("recordList");
            recordListField.setAccessible(true);
            List<ConsumerRecord<String, String>> recordList = (List<ConsumerRecord<String, String>>) recordListField.get(pandaNotificationListener);
            assert(recordList.contains(consumerRecord));
        } catch (Exception e) {
            e.printStackTrace();
        }

        verify(pandaListenerService, never()).storeConsumeEventsInDb(anyList());
    }

    @Test
    public void testHandleAcknowledgment() {
        pandaNotificationListener.handleAcknowledgment(acknowledgment, consumerRecord.offset());

        verify(acknowledgment, never()).acknowledge();
    }

    @Test
    public void testHandleAcknowledgmentNull() {
        pandaNotificationListener.handleAcknowledgment(null, consumerRecord.offset());

        verify(acknowledgment, never()).acknowledge();
    }

    @Test
    public void testRegisterKafkaListener() throws BusinessException {
        pandaNotificationListener.registerKafkaListener();

        verify(customKafkaListenerRegistry, times(1)).registerListenerContainer("panda-topic-listener-id");
    }

    @Test
    public void testStopListener() throws Exception {
        List<ConsumerRecord<String, String>> recordList = new ArrayList<>();
        recordList.add(consumerRecord);

        // Using reflection to access the private ackMap field
        Field ackMapField = PandaNotificationListener.class.getDeclaredField("ackMap");
        ackMapField.setAccessible(true);
        ConcurrentMap<Long, Acknowledgment> ackMap = (ConcurrentMap<Long, Acknowledgment>) ackMapField.get(pandaNotificationListener);
        if (ackMap == null) {
            ackMap = new ConcurrentHashMap<>();
            ackMapField.set(pandaNotificationListener, ackMap);
        }
        ackMap.put(consumerRecord.offset(), acknowledgment);

        doNothing().when(pandaListenerService).storeConsumeEventsInDb(anyList());

        pandaNotificationListener.stopListener();

        verify(pandaListenerService, times(1)).storeConsumeEventsInDb(recordList);
        verify(acknowledgment, times(1)).acknowledge();
        verify(customKafkaListenerRegistry, times(1)).unregisterListenerContainer("panda-topic-listener-id");
    }
}







////////////////////////////////////////////////////////
import org.apache.kafka.clients.consumer.ConsumerRecord;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.*;
import org.springframework.test.context.junit.jupiter.SpringExtension;
import org.springframework.kafka.support.Acknowledgment;

import java.lang.reflect.Field;
import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.ConcurrentMap;

import static org.mockito.ArgumentMatchers.anyList;
import static org.mockito.Mockito.*;

@ExtendWith(SpringExtension.class)
public class PandaNotificationListenerTest {

    @InjectMocks
    @Spy
    private PandaNotificationListener pandaNotificationListener;

    @Mock
    private CustomKafkaListenerRegistry customKafkaListenerRegistry;

    @Mock
    private PandaListenerService pandaListenerService;

    @Mock
    private Acknowledgment acknowledgment;

    private ConsumerRecord<String, String> consumerRecord;

    @BeforeEach
    public void setUp() {
        consumerRecord = new ConsumerRecord<>(
                "panda_data_change_alert", 0, 5347483L, "36757381", 
                "{\"towerCode\":\"panda\",\"attributes\":[\"accountId\"],\"keys\":{\"contact_type_cd\":\"ADRR\",\"end_dt\":null,\"account_id\":\"3131338\",\"employing_party_id\":\"1137\",\"person_id\":\"209115\"},\"entityName\":\"AccountContact\",\"data\":null,\"eventId\":\"36757381\",\"traceId\":\"36757381:2024-07-29 21:20:06\",\"eventType\":\"UPDATE\",\"timestamp\":\"2024-07-29T21:20:06.432164Z\"}"
        );
    }

    @Test
    public void testStopListener() throws Exception {
        List<ConsumerRecord<String, String>> recordList = new ArrayList<>();
        recordList.add(consumerRecord);

        // Using reflection to access the private fields
        Field recordListField = PandaNotificationListener.class.getDeclaredField("recordList");
        recordListField.setAccessible(true);
        recordListField.set(pandaNotificationListener, recordList);

        Field ackMapField = PandaNotificationListener.class.getDeclaredField("ackMap");
        ackMapField.setAccessible(true);
        ConcurrentMap<Long, Acknowledgment> ackMap = (ConcurrentMap<Long, Acknowledgment>) ackMapField.get(pandaNotificationListener);
        if (ackMap == null) {
            ackMap = new ConcurrentHashMap<>();
            ackMapField.set(pandaNotificationListener, ackMap);
        }
        ackMap.put(consumerRecord.offset(), acknowledgment);

        doNothing().when(pandaListenerService).storeConsumeEventsInDb(anyList());

        pandaNotificationListener.stopListener();

        verify(pandaListenerService, times(1)).storeConsumeEventsInDb(recordList);
        verify(acknowledgment, times(1)).acknowledge();
        verify(customKafkaListenerRegistry, times(1)).unregisterListenerContainer("panda-topic-listener-id");
    }
}

