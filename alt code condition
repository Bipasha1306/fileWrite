import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.springframework.stereotype.Service;

import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;

@Service
public class PandaListenerService {

    private final NotificationRepository notificationRepository;
    private final ObjectMapper objectMapper = new ObjectMapper();

    public PandaListenerService(final NotificationRepository notificationRepository) {
        this.notificationRepository = notificationRepository;
    }

    public void storeConsumeEventsInDb(String messages) throws JsonProcessingException, ParseException {
        SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSSSSSX");
        PandaListnerResponse listnerResponse = objectMapper.readValue(messages, PandaListnerResponse.class);
        NotificationDetails notificationDetails = new NotificationDetails();

        // Check if entityName is "AltCode" and alt_code_type_cd is "spn"
        if ("AltCode".equals(listnerResponse.getEntityName())) {
            String altCodeTypeCd = listnerResponse.getKeys().get("alt_code_type_cd");
            if (!"spn".equals(altCodeTypeCd)) {
                log.info("Skipping message with entityName 'AltCode' and alt_code_type_cd: " + altCodeTypeCd);
                return; // Skip processing this message
            }
        }

        Date jsonDate = new Date(listnerResponse.getTimestamp());
        notificationDetails.setNotification(listnerResponse.getKeys().toString());
        notificationDetails.setEventId(listnerResponse.getEventId());
        notificationDetails.setEntityName(listnerResponse.getEntityName());
        notificationDetails.setEventType(listnerResponse.getEventType());
        notificationDetails.setSourceSystem(listnerResponse.getTowerCode());
        notificationDetails.setProcessed("N");
        notificationDetails.setCycleDate(jsonDate);
        notificationDetails.setAuditCreateBy("SYSTEM");
        notificationDetails.setComments("From Panda");
        notificationDetails.setAuditCreateTs(new Date());
        notificationDetails.setAuditCreateBy("SYSTEM");
        notificationDetails.setAuditUpdateTs(new Date());

        try {
            notificationRepository.save(notificationDetails);
            log.info("Panda notification messages inserted for eventId = " + listnerResponse.getEventId());
        } catch (Exception e) {
            log.error("Failed to insert notification details", e);
        }
    }
}
