import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RestController;

@RestController
public class PandaListenerController {

    private final PandaNotificationListener pandaNotificationListener;

    public PandaListenerController(PandaNotificationListener pandaNotificationListener) {
        this.pandaNotificationListener = pandaNotificationListener;
    }

    @GetMapping(value = "/listener")
    public ResponseEntity<String> startListener() {
        try {
            pandaNotificationListener.registerKafkaListener();
            return ResponseEntity.ok("Kafka listener started successfully.");
        } catch (Exception ex) {
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body("Failed to start Kafka listener: " + ex.getMessage());
        }
    }

    @GetMapping(value = "/stopListener")
    public ResponseEntity<String> stopListener() {
        try {
            pandaNotificationListener.stopListener();
            return ResponseEntity.ok("Kafka listener stopped successfully.");
        } catch (Exception ex) {
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body("Failed to stop Kafka listener: " + ex.getMessage());
        }
    }
}
///////////////////////////////////////////////////////////////////////////

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.doThrow;
import static org.mockito.Mockito.verify;

public class PandaListenerControllerTest {

    @Mock
    private PandaNotificationListener pandaNotificationListener;

    @InjectMocks
    private PandaListenerController pandaListenerController;

    @BeforeEach
    public void setUp() {
        MockitoAnnotations.openMocks(this);
    }

    @Test
    public void testStartListenerSuccess() {
        ResponseEntity<String> response = pandaListenerController.startListener();

        assertEquals(HttpStatus.OK, response.getStatusCode());
        assertEquals("Kafka listener started successfully.", response.getBody());
        verify(pandaNotificationListener).registerKafkaListener();
    }

    @Test
    public void testStartListenerFailure() {
        doThrow(new RuntimeException("Kafka start error")).when(pandaNotificationListener).registerKafkaListener();

        ResponseEntity<String> response = pandaListenerController.startListener();

        assertEquals(HttpStatus.INTERNAL_SERVER_ERROR, response.getStatusCode());
        assertEquals("Failed to start Kafka listener: Kafka start error", response.getBody());
        verify(pandaNotificationListener).registerKafkaListener();
    }

    @Test
    public void testStopListenerSuccess() {
        ResponseEntity<String> response = pandaListenerController.stopListener();

        assertEquals(HttpStatus.OK, response.getStatusCode());
        assertEquals("Kafka listener stopped successfully.", response.getBody());
        verify(pandaNotificationListener).stopListener();
    }

    @Test
    public void testStopListenerFailure() {
        doThrow(new RuntimeException("Kafka stop error")).when(pandaNotificationListener).stopListener();

        ResponseEntity<String> response = pandaListenerController.stopListener();

        assertEquals(HttpStatus.INTERNAL_SERVER_ERROR, response.getStatusCode());
        assertEquals("Failed to stop Kafka listener: Kafka stop error", response.getBody());
        verify(pandaNotificationListener).stopListener();
    }
}
//////////////////////////////////////////////////
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.springframework.http.ResponseEntity;

import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.Mockito.doNothing;
import static org.mockito.Mockito.verify;

public class FusionDataSourcingDataChangeAlertControllerTest {

    @Mock
    private PandaNotificationListener pandaNotificationListener;

    @InjectMocks
    private FusionDataSourcingDataChangeAlertController controller;

    @BeforeEach
    void setUp() {
        MockitoAnnotations.openMocks(this);
    }

    @Test
    void testActivateListener() throws BusinessException {
        // Arrange
        doNothing().when(pandaNotificationListener).registerKafkaListener();

        // Act
        ResponseEntity<CustomResponse<String>> response = controller.activateListener();

        // Assert
        assertThat(response.getBody().getData()).isEqualTo("Kafka listener started successfully.");
        verify(pandaNotificationListener).registerKafkaListener();
    }

    @Test
    void testDeactivateListener() throws BusinessException {
        // Arrange
        doNothing().when(pandaNotificationListener).stopListener();

        // Act
        ResponseEntity<CustomResponse<String>> response = controller.deactivateListener();

        // Assert
        assertThat(response.getBody().getData()).isEqualTo("Kafka listener stopped successfully");
        verify(pandaNotificationListener).stopListener();
    }
}
