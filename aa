@Test
    public void testIncrementalLoadSuccess() throws BusinessException {
        // Arrange
        String queryName = "testQuery";
        Map<String, String> entityAndFilterColumn = new HashMap<>();
        entityAndFilterColumn.put("AccountTest", "account_id");

        Map<String, String> globalEventTypeMap = new HashMap<>();
        globalEventTypeMap.put("123456", "Update");

        QueryEventMapDto queryEventMapDto = new QueryEventMapDto(queryName, globalEventTypeMap, Map.of("account_id", List.of("1234", "3456")));
        
        when(baseService.getRadixQueryProperties(queryName)).thenReturn(Optional.of(new DataChangeAlertRadixProperties.RadixQueryProperties()));
        when(baseService.getEntitiesAndFilterColumnsByQuery(any())).thenReturn(entityAndFilterColumn);
        doReturn(queryEventMapDto).when(service).getFilters(entityAndFilterColumn, queryName);

        LoadDto loadDto = new LoadDto("run123", null);
        when(service.insertLoad(queryName)).thenReturn(loadDto);

        StringBuilder finalResult = new StringBuilder("result");
        doReturn(new StringBuilder("result")).when(service).processSubLists(anyList(), anyString(), any(), any(), anyString(), any());

        // Act
        DataChangeAlertLoadDto result = service.incrementalLoad(queryName);

        // Assert
        assertNotNull(result);
        assertEquals("run123", result.getRunId());
        assertNull(result.getFileContent());  // Expecting null because fileContent is set with null in the test arrangement
        verify(loadService, never()).updateTransformingStatusByRunId(anyString(), any(DataLoadTransformingStatuses.class));

        // Verifying method calls with specific arguments
        verify(service).insertLoad(queryName);
        verify(service).getFilters(entityAndFilterColumn, queryName);
        verify(service).processSubLists(anyList(), anyString(), any(), any(), anyString(), any());
    }

    @Test(expected = BusinessException.class)
    public void testIncrementalLoadInvalidQueryName() throws BusinessException {
        // Arrange
        String invalidQueryName = "invalidQuery";
        when(baseService.getRadixQueryProperties(invalidQueryName)).thenReturn(Optional.empty());

        // Act
        service.incrementalLoad(invalidQueryName);

        // This should throw a BusinessException due to invalid query name
    }
