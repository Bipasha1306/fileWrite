import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.springframework.http.ResponseEntity;

public class DataChangeAlertBaseServiceImplTest {

    @InjectMocks
    private DataChangeAlertBaseServiceImpl service;

    @Mock
    private GraphQLClient graphQLClient;

    @Mock
    private DataChangeAlertRadixProperties dataChangeAlertRadixProperties;

    @Mock
    private RestTemplate restTemplate;

    @BeforeEach
    public void setUp() {
        MockitoAnnotations.openMocks(this);
    }

    @Test
    public void testGetRadixResponse_Success() {
        String query = "getAllAccountSpnIdsAndSpnNames";
        Map<String, Object> filters = new HashMap<>();
        String serviceUrl = "https://panda-datagraph.prod.gaiacloud.jpmchase.net/graphql";

        when(dataChangeAlertRadixProperties.getRadixServices())
            .thenReturn(List.of(new RadixServiceProperties(serviceUrl, List.of(query))));

        ResponseEntity<GraphQLResponse> mockResponse = mock(ResponseEntity.class);
        when(graphQLClient.sendWithTryCount(any(), any(), any(), anyInt(), eq(GraphQLResponse.class)))
            .thenReturn(mockResponse);

        ResponseEntity<GraphQLResponse> response = service.getRadixResponse(query, filters);

        assertNotNull(response);
        verify(graphQLClient, times(1)).sendWithTryCount(eq(restTemplate), eq(query), eq(filters), anyInt(), eq(GraphQLResponse.class));
    }

    @Test
    public void testGetRadixResponse_ServiceUrlNotFound() {
        String query = "getAllAccountSpnIdsAndSpnNames";
        Map<String, Object> filters = new HashMap<>();

        when(dataChangeAlertRadixProperties.getRadixServices()).thenReturn(List.of());

        IllegalArgumentException exception = assertThrows(IllegalArgumentException.class, () -> {
            service.getRadixResponse(query, filters);
        });
        assertEquals("Service URL not found for the given query.", exception.getMessage());
    }
}
