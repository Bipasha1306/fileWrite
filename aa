import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.ArgumentMatchers.*;
import static org.mockito.Mockito.*;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.springframework.http.ResponseEntity;

public class DataChangeAlertBaseServiceImplTest {

    @InjectMocks
    private DataChangeAlertBaseServiceImpl service;

    @Mock
    private GraphQLClient graphQLClient;

    @Mock
    private DataChangeAlertRadixProperties dataChangeAlertRadixProperties;

    @Mock
    private RestTemplate restTemplate;

    @BeforeEach
    public void setUp() {
        MockitoAnnotations.openMocks(this);
    }

    @Test
    void testGetRadixResponse() {
        // Arrange
        String query = "testQuery";
        Map<String, Object> filters = new HashMap<>(); // Using an empty map for simplicity
        String serviceUrl = "http://example.com";
        ResponseEntity<GraphQLResponse> expectedResponse = ResponseEntity.ok(new GraphQLResponse());

        // Assume no services are configured
        when(dataChangeAlertRadixProperties.getRadixServices()).thenReturn(Collections.emptyList());
        when(graphQLClient.sendWithTryCount(any(RestTemplate.class), eq(query), eq(filters), eq(2), eq(GraphQLResponse.class)))
            .thenReturn(expectedResponse);

        // Act
        Exception exception = assertThrows(IllegalArgumentException.class, () -> {
            ResponseEntity<GraphQLResponse> response = service.getRadixResponse(query, filters);
        });

        // Assert
        assertEquals("Service URL not found for the given query.", exception.getMessage());
    }
}
