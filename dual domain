To modify your existing configuration class, service interface, and implementation to handle the nested YAML structure, you can follow these steps:

### 1. Update the Configuration Class
You need to modify the `PandaDataRadixConfigProperties` class to handle the nested `radix-services` structure.

```java
@ConfigurationProperties(prefix = "data-change-alert.radix")
@Configuration
@FieldDefaults(level = AccessLevel.PRIVATE)
@Getter
@Setter
public class PandaDataRadixConfigProperties {
    List<RadixServiceProperties> radixServices;

    @Getter
    @Setter
    public static class RadixServiceProperties {
        String radixServiceUrl;
        List<RadixQueryProperties> queries;
    }

    @Getter
    @Setter
    public static class RadixQueryProperties {
        String queryName;
        String radixQuery;
        List<RadixEntityProperties> entities;
        String targetTable;
    }

    @Getter
    @Setter
    public static class RadixEntityProperties {
        String name;
        List<String> filterColumns;
    }
}
```

### 2. Modify the Service Interface
Update the `BaseService` interface to accommodate the changes required for handling multiple `radix-services`.

```java
@Service
public interface BaseService {

    ResponseEntity<GraphqlResponse> getResponse(String query, Map<String, Object> filters, String serviceUrl);

    Optional<PandaDataRadixConfigProperties.RadixQueryProperties> getRadixQueryProperties(String queryName);

    Map<String, String> getEntitiesAndFilterColumnsByQuery(Optional<PandaDataRadixConfigProperties.RadixQueryProperties> radixQueryProperties);

    String getConvertedDate(String inputDate);
}
```

### 3. Update the Implementation Class
Now, modify the `BaseServiceImpl` class to handle multiple `radix-services`:

```java
@Slf4j
@Service
public class BaseServiceImpl implements BaseService {

    private final GraphqlClient graphqlClient;
    private final PandaDataRadixConfigProperties pandaDataRadixConfigProperties;

    @Qualifier("radixRestTemplate")
    private final RestTemplate restTemplate;

    private static final DateTimeFormatter DATE_FORMATTER = DateTimeFormatter.ofPattern("dd-MMM-yy");

    public BaseServiceImpl(GraphqlClient graphqlClient, PandaDataRadixConfigProperties pandaDataRadixConfigProperties,
                           @Qualifier("radixRestTemplate") RestTemplate restTemplate) {
        this.graphqlClient = graphqlClient;
        this.pandaDataRadixConfigProperties = pandaDataRadixConfigProperties;
        this.restTemplate = restTemplate;
    }

    @Override
    public ResponseEntity<GraphqlResponse> getResponse(String query, Map<String, Object> filters, String serviceUrl) {
        return graphqlClient.sendWithTryCount(restTemplate, query, filters,
                                              serviceUrl,
                                              2, GraphqlResponse.class);
    }

    @Override
    public Optional<PandaDataRadixConfigProperties.RadixQueryProperties> getRadixQueryProperties(String queryName) {
        return pandaDataRadixConfigProperties.getRadixServices().stream()
                 .flatMap(service -> service.getQueries().stream())
                 .filter(radixQueryProperties -> radixQueryProperties.getQueryName().equals(queryName))
                 .findFirst();
    }

    @Override
    public Map<String, String> getEntitiesAndFilterColumnsByQuery(Optional<PandaDataRadixConfigProperties.RadixQueryProperties> radixQueryProperties) {
        return radixQueryProperties
                 .map(radixQueryProperties1 -> 
                      radixQueryProperties1.getEntities().stream()
                                           .collect(Collectors.toMap(
                                                PandaDataRadixConfigProperties.RadixEntityProperties::getName,
                                                radixEntityProperties -> radixEntityProperties.getFilterColumns().get(0))))
                 .orElse(new LinkedHashMap<>());
    }

    @Override
    public String getConvertedDate(String inputDate) {
        try {
            if (inputDate.isEmpty()) {
                return LocalDate.now().format(DATE_FORMATTER);
            }
            LocalDate localDate = LocalDate.parse(inputDate);
            return localDate.format(DATE_FORMATTER);
        } catch (DateTimeParseException e) {
            log.info("Error parsing date: " + inputDate);
            return "Invalid Date!";
        }
    }
}
```

### Key Changes:
- **Configuration Class**: Introduced a new `RadixServiceProperties` class to represent each `radix-service`, and adjusted the structure to support multiple services.
- **Service Interface**: Added an extra parameter `serviceUrl` to the `getResponse` method to dynamically handle the service URL.
- **Implementation Class**: Updated the logic to process the list of `radix-services` and extract relevant query details.

This approach allows you to handle the new nested structure while preserving the existing logic.


/////////////////// 5:53 pm 
Hereâ€™s how you can implement the `findServiceUrlByQuery` method to determine the service URL based on the query:

### Implementation of `findServiceUrlByQuery`

```java
private String findServiceUrlByQuery(String query) {
    return pandaDataRadixConfigProperties.getRadixServices().stream()
        .filter(service -> service.getQueries().stream()
            .anyMatch(radixQueryProperties -> radixQueryProperties.getRadixQuery().equals(query)))
        .map(PandaDataRadixConfigProperties.RadixServiceProperties::getRadixServiceUrl)
        .findFirst()
        .orElseThrow(() -> new IllegalArgumentException("Service URL not found for the given query."));
}
```

### Explanation:
- **Stream and Filter**: The method iterates through the list of `RadixServiceProperties` to find a service that contains the query.
- **Mapping**: Once the correct service is identified, it extracts the `radixServiceUrl` using the `map` function.
- **Exception Handling**: If no matching service is found, it throws an `IllegalArgumentException` to indicate that the service URL could not be determined for the provided query.

### Usage in `getResponse`

You can then use this method in the `getResponse` method as follows:

```java
@Override
public ResponseEntity<GraphqlResponse> getResponse(String query, Map<String, Object> filters) {
    String serviceUrl = findServiceUrlByQuery(query);
    return graphqlClient.sendWithTryCount(restTemplate, query, filters, serviceUrl, 2, GraphqlResponse.class);
}
```

This approach keeps the logic clean and separates the concern of determining the service URL from the main method.
