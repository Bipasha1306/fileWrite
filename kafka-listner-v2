import org.springframework.beans.factory.annotation.Value;
import org.springframework.kafka.annotation.KafkaListener;
import org.springframework.kafka.listener.MessageListener;
import org.springframework.stereotype.Service;
import lombok.AccessLevel;
import lombok.experimental.FieldDefaults;
import org.apache.kafka.clients.consumer.ConsumerRecord;

@Service
@FieldDefaults(level = AccessLevel.PRIVATE, makeFinal = true)
public class PandaNotificationListener implements MessageListener<String, String> {

    PandaListenerService pandaListenerService;

    @Value("${kafka.topic}")
    String topicName;

    public PandaNotificationListener(PandaListenerService pandaListenerService) {
        this.pandaListenerService = pandaListenerService;
    }

    /**
     * This method consumes events from the Kafka topic.
     * @throws BusinessException throws custom business exception
     */
    @KafkaListener(id = "panda-topic-listener-id", topics = "#{__listener.topicName}")
    @Override
    public void onMessage(final ConsumerRecord<String, String> consumerRecord) {
        try {
            String messages = consumerRecord.value();
            log.info("Value = " + messages);
            pandaListenerService.storeConsumeEventsInDb(messages);
        } catch (Exception exception) {
            log.error("Listening panda data did throw an error!", exception);
        }
    }
}
