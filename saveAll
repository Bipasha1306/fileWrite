@Slf4j
@Service
@FieldDefaults(level = AccessLevel.PRIVATE, makeFinal = true)
public class PandaNotificationListener implements MessageListener<String, String> {

    CustomKafkaListenerRegistry customKafkaListenerRegistry;
    PandaListenerService pandaListenerService;
    
    @Value("${kafka.listeners[3].listener-id}")
    String listenerId;

    List<ConsumerRecord<String, String>> recordList = new ArrayList<>();

    public PandaNotificationListener(CustomKafkaListenerRegistry customKafkaListenerRegistry,
                                     final PandaListenerService pandaListenerService, final String listenerId) {
        this.customKafkaListenerRegistry = customKafkaListenerRegistry;
        this.pandaListenerService = pandaListenerService;
        this.listenerId = listenerId;
    }

    /**
     * This method make sure to consume events from topic daily 5 am
     * @throws BusinessException throws custom business exception
     */
    @Scheduled(cron = "0 00 05 * * ?") //Runs daily at 5 AM
    public void consumeFromKafka() throws BusinessException {
        log.info("The kafka listener started");
        registerKafkaListener();
    }

    @Override
    public void onMessage(final ConsumerRecord<String, String> consumerRecord) {
        try {
            log.info("Received record with value: " + consumerRecord.value() + " and offset: " + consumerRecord.offset());
            synchronized (recordList) {
                recordList.add(consumerRecord);
            }
        } catch (Exception exception) {
            log.error("Listening panda data did throw an error!", exception);
        }
    }

    public void registerKafkaListener() throws BusinessException {
        customKafkaListenerRegistry.registerListenerContainer(listenerId);
    }

    @Scheduled(cron = "0 15 05 * * ?")
    public void stopListener() {
        try {
            List<ConsumerRecord<String, String>> recordsToStore;
            synchronized (recordList) {
                recordsToStore = new ArrayList<>(recordList);
                recordList.clear();
            }
            if (!recordsToStore.isEmpty()) {
                pandaListenerService.storeConsumeEventsInDb(recordsToStore);
            }
        } catch (Exception exception) {
            log.error("Stopping panda listener did throw an error!", exception);
        } finally {
            customKafkaListenerRegistry.unregisterListenerContainer(listenerId);
        }
    }
}
