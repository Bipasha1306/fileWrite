@Slf4j
@Service
@FieldDefaults(level = AccessLevel.PRIVATE, makeFinal = true)
public class PandaNotificationListener implements MessageListener<String, String> {

    CustomKafkaListenerRegistry customKafkaListenerRegistry;
    PandaListenerService pandaListenerService;
    
    @Value("${kafka.listeners[3].listener-id}")
    String listenerId;

    List<ConsumerRecord<String, String>> recordList = new ArrayList<>();

    public PandaNotificationListener(CustomKafkaListenerRegistry customKafkaListenerRegistry,
                                     final PandaListenerService pandaListenerService, final String listenerId) {
        this.customKafkaListenerRegistry = customKafkaListenerRegistry;
        this.pandaListenerService = pandaListenerService;
        this.listenerId = listenerId;
    }

    /**
     * This method make sure to consume events from topic daily 5 am
     * @throws BusinessException throws custom business exception
     */
    @Scheduled(cron = "0 00 05 * * ?") //Runs daily at 5 AM
    public void consumeFromKafka() throws BusinessException {
        log.info("The kafka listener started");
        registerKafkaListener();
    }

    @Override
    public void onMessage(final ConsumerRecord<String, String> consumerRecord) {
        try {
            log.info("Received record with value: " + consumerRecord.value() + " and offset: " + consumerRecord.offset());
            synchronized (recordList) {
                recordList.add(consumerRecord);
            }
        } catch (Exception exception) {
            log.error("Listening panda data did throw an error!", exception);
        }
    }

    public void registerKafkaListener() throws BusinessException {
        customKafkaListenerRegistry.registerListenerContainer(listenerId);
    }

    @Scheduled(cron = "0 15 05 * * ?")
    public void stopListener() {
        try {
            List<ConsumerRecord<String, String>> recordsToStore;
            synchronized (recordList) {
                recordsToStore = new ArrayList<>(recordList);
                recordList.clear();
            }
            if (!recordsToStore.isEmpty()) {
                pandaListenerService.storeConsumeEventsInDb(recordsToStore);
            }
        } catch (Exception exception) {
            log.error("Stopping panda listener did throw an error!", exception);
        } finally {
            customKafkaListenerRegistry.unregisterListenerContainer(listenerId);
        }
    }
}
--------------------------------------------------------------------------------------------------------

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.apache.kafka.clients.consumer.ConsumerRecord;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Service;

import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

@Service
public class PandaListenerService {

    private static final Logger log = LoggerFactory.getLogger(PandaListenerService.class);

    private final NotificationRepository notificationRepository;
    private final ObjectMapper objectMapper = new ObjectMapper();

    public PandaListenerService(final NotificationRepository notificationRepository) {
        this.notificationRepository = notificationRepository;
    }

    public void storeConsumeEventsInDb(List<ConsumerRecord<String, String>> consumerRecords) throws JsonProcessingException, ParseException {
        SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSSSSSX");
        List<NotificationDetails> notificationDetailsList = new ArrayList<>();

        for (ConsumerRecord<String, String> record : consumerRecords) {
            String message = record.value();
            long offset = record.offset();

            PandaListenerResponse listenerResponse = objectMapper.readValue(message, PandaListenerResponse.class);

            // Check if entityName is "AltCode" and alt_code_type_cd is "spn"
            if ("AltCode".equals(listenerResponse.getEntityName())) {
                String altCodeTypeCd = listenerResponse.getKeys().get("alt_code_type_cd");
                if (!"spn".equals(altCodeTypeCd)) {
                    log.info("Skipping message with entityName 'AltCode' and alt_code_type_cd: " + altCodeTypeCd);
                    continue; // Skip processing this message
                }
            }

            NotificationDetails notificationDetails = new NotificationDetails();
            Date jsonDate = dateFormat.parse(String.valueOf(listenerResponse.getTimestamp()));
            notificationDetails.setNotificationId(listenerResponse.getKeys().toString());
            notificationDetails.setEventId(listenerResponse.getEventId());
            notificationDetails.setEntityName(listenerResponse.getEntityName());
            notificationDetails.setEventType(listenerResponse.getEventType());
            notificationDetails.setTowerCode(listenerResponse.getTowerCode());
            notificationDetails.setTimestamp(jsonDate);
            notificationDetails.setProcessed("N");
            notificationDetails.setCreateBy("SYSTEM");
            notificationDetails.setUpdateBy("SYSTEM");
            notificationDetails.setCreateDate(new Date());
            notificationDetails.setUpdateDate(new Date());
            notificationDetails.setComments("From Panda with offset: " + offset);

            notificationDetailsList.add(notificationDetails);
        }

        try {
            notificationRepository.saveAll(notificationDetailsList);
            log.info("Panda notification messages inserted for " + notificationDetailsList.size() + " records.");
        } catch (Exception e) {
            log.error("Failed to insert notification details", e);
        }
    }
}

