GraphQLProcessingService
Responsibility: Handles operations related to GraphQL query execution and response processing.
Methods to Move:
extractKeysFromQuery
extractKeys
storeDataInTXT (consider renaming to something like processGraphQLResponse)
addHardDelete
getValue (could be used for JSON processing within GraphQL responses)
3. NotificationService
Responsibility: Manages operations related to retrieving and processing notifications from the DataChangeAlertRepository.
Methods to Move:
getFilters
getEventTypeMap
processNotificationDetails
/////////////////////////////////////////////////// September 2 12.59

import org.springframework.transaction.annotation.Transactional;
import java.util.*;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import java.util.stream.Collectors;

@Transactional
public PandaRunStatusDto incrementalLoad(String queryName) throws BusinessException {

    LoadDto loadDto = insertLoad(queryName);

    // STEP-1: Get query from spring cloud config
    Optional<PandaDataRadixConfigProperties.RadixQueryProperties> radixQueryProperties = baseService.getRadixQueryProperties(queryName);
    if (radixQueryProperties.isEmpty()) {
        throw new BusinessException("Query name is incorrect");
    }

    Map<String, String> entityAndFilterColumn = baseService.getEntitiesAndFilterColumnsByQuery(radixQueryProperties);

    // STEP-2: Get filters from Notification table
    Map<String, Object> filters = getFilters(entityAndFilterColumn);
    String filterKey = filters.keySet().stream().findFirst().orElseThrow(() -> new BusinessException("No filters found"));
    String currentFilter = getCurrentFilter(entityAndFilterColumn);

    Map<String, String> eventTypeMap = getEventTypeMap();

    // Return empty values if eventTypeMap is empty
    if (eventTypeMap.isEmpty()) {
        updateStatus(loadDto, "SUCCESS");
        return PandaRunStatusDto.builder().runId(loadDto.getRunId()).fileContent(null).build();
    }

    // STEP-3: Create sublists from eventTypeMap keys
    List<String> eventTypeKeys = new ArrayList<>(eventTypeMap.keySet());
    List<List<String>> sublists = createSublists(eventTypeKeys, 10);

    // Process each sublist
    StringBuilder finalResult = new StringBuilder();
    boolean writeHeaders = true;

    for (List<String> sublist : sublists) {

        // Filter the eventTypeMap for the current sublist
        Map<String, String> newEventTypeMap = sublist.stream()
                .collect(Collectors.toMap(
                        key -> key,
                        eventTypeMap::get
                ));

        // Create modified filters using eventTypeMap for the current sublist
        Map<String, Object> modifiedFilters = Map.of(filterKey, sublist);

        // STEP-4: Execute the query for the current batch
        ResponseEntity<GraphqlResponse> response = baseService.getResponse(radixQueryProperties.get().getRadixQuery(), modifiedFilters);
        String graphQLQuery = radixQueryProperties.get().getRadixQuery();

        // Extract operation name from GraphQL query
        String operationName = extractOperationName(graphQLQuery);

        List<String> headers = extractKeysFromQuery(graphQLQuery, operationName);

        // Serialize the GraphQL response to a string
        String graphQLResponse = convertToJson(response.getBody());

        // STEP-5: Call storeDataInTXT for each batch and append the results
        String result = storeDataInTXT(graphQLResponse, headers, newEventTypeMap, loadDto, operationName, currentFilter, writeHeaders);
        finalResult.append(result);

        // Set writeHeaders to false after the first batch
        writeHeaders = false;
    }

    // STEP-6: Return the final accumulated result
    return PandaRunStatusDto.builder().runId(loadDto.getRunId()).fileContent(finalResult.toString().getBytes()).build();
}

// Helper function to create sublists
private List<List<String>> createSublists(List<String> list, int batchSize) {
    return list.stream()
            .collect(Collectors.groupingBy(s -> list.indexOf(s) / batchSize))
            .values().stream()
            .map(ArrayList::new)
            .toList();
}

/**
 * Method to map the filter ids columns to the correct one
 * @param filterMap the map of the entity and column name
 * @return filter
 */
public String getCurrentFilter(Map<String, String> filterMap) {
    return filterMap.values().stream()
            .map(value -> switch (value) {
                case "account_id" -> "accountId";
                case "party_id" -> "partyId";
                default -> value;
            })
            .collect(Collectors.joining());
}

/**
 * Extracts operation name from GraphQL query
 * @param graphQLQuery the GraphQL query string
 * @return operation name
 */
private String extractOperationName(String graphQLQuery) {
    Pattern pattern = Pattern.compile("^\\s*(query|mutation|subscription)\\s+(\\w+).*", Pattern.DOTALL);
    Matcher matcher = pattern.matcher(graphQLQuery);
    if (matcher.find()) {
        return matcher.group(2);
    } else {
        throw new RuntimeException("Operation name not found.");
    }
}

/**
 * Converts an object to its JSON string representation
 * @param object the object to convert
 * @return JSON string
 */
private String convertToJson(Object object) {
    ObjectMapper objectMapper = new ObjectMapper();
    try {
        return objectMapper.writeValueAsString(object);
    } catch (JsonProcessingException e) {
        throw new RuntimeException(e);
    }
}
